// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robotdata.proto

#ifndef PROTOBUF_robotdata_2eproto__INCLUDED
#define PROTOBUF_robotdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace robotdata {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_robotdata_2eproto();
void protobuf_AssignDesc_robotdata_2eproto();
void protobuf_ShutdownFile_robotdata_2eproto();

class RobotInfo;
class SensorInfo;
class FullMap;
class FullMap_MapParticle;
class FullPath;
class FullPath_PathDot;

// ===================================================================

class RobotInfo : public ::google::protobuf::Message {
 public:
  RobotInfo();
  virtual ~RobotInfo();

  RobotInfo(const RobotInfo& from);

  inline RobotInfo& operator=(const RobotInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RobotInfo& default_instance();

  void Swap(RobotInfo* other);

  // implements Message ----------------------------------------------

  RobotInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RobotInfo& from);
  void MergeFrom(const RobotInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 length = 1;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 1;
  inline ::google::protobuf::int32 length() const;
  inline void set_length(::google::protobuf::int32 value);

  // required int32 width = 2;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 2;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // required float posx = 3;
  inline bool has_posx() const;
  inline void clear_posx();
  static const int kPosxFieldNumber = 3;
  inline float posx() const;
  inline void set_posx(float value);

  // required float posy = 4;
  inline bool has_posy() const;
  inline void clear_posy();
  static const int kPosyFieldNumber = 4;
  inline float posy() const;
  inline void set_posy(float value);

  // required float theta = 5;
  inline bool has_theta() const;
  inline void clear_theta();
  static const int kThetaFieldNumber = 5;
  inline float theta() const;
  inline void set_theta(float value);

  // @@protoc_insertion_point(class_scope:robotdata.RobotInfo)
 private:
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_posx();
  inline void clear_has_posx();
  inline void set_has_posy();
  inline void clear_has_posy();
  inline void set_has_theta();
  inline void clear_has_theta();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 length_;
  ::google::protobuf::int32 width_;
  float posx_;
  float posy_;
  float theta_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_robotdata_2eproto();
  friend void protobuf_AssignDesc_robotdata_2eproto();
  friend void protobuf_ShutdownFile_robotdata_2eproto();

  void InitAsDefaultInstance();
  static RobotInfo* default_instance_;
};
// -------------------------------------------------------------------

class SensorInfo : public ::google::protobuf::Message {
 public:
  SensorInfo();
  virtual ~SensorInfo();

  SensorInfo(const SensorInfo& from);

  inline SensorInfo& operator=(const SensorInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SensorInfo& default_instance();

  void Swap(SensorInfo* other);

  // implements Message ----------------------------------------------

  SensorInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SensorInfo& from);
  void MergeFrom(const SensorInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float angleSpan = 1;
  inline bool has_anglespan() const;
  inline void clear_anglespan();
  static const int kAngleSpanFieldNumber = 1;
  inline float anglespan() const;
  inline void set_anglespan(float value);

  // required float angleCenter = 2;
  inline bool has_anglecenter() const;
  inline void clear_anglecenter();
  static const int kAngleCenterFieldNumber = 2;
  inline float anglecenter() const;
  inline void set_anglecenter(float value);

  // required float offsetXmapMM = 3;
  inline bool has_offsetxmapmm() const;
  inline void clear_offsetxmapmm();
  static const int kOffsetXmapMMFieldNumber = 3;
  inline float offsetxmapmm() const;
  inline void set_offsetxmapmm(float value);

  // required float offsetYmapMM = 4;
  inline bool has_offsetymapmm() const;
  inline void clear_offsetymapmm();
  static const int kOffsetYmapMMFieldNumber = 4;
  inline float offsetymapmm() const;
  inline void set_offsetymapmm(float value);

  // required int32 distance = 5;
  inline bool has_distance() const;
  inline void clear_distance();
  static const int kDistanceFieldNumber = 5;
  inline ::google::protobuf::int32 distance() const;
  inline void set_distance(::google::protobuf::int32 value);

  // required string sensor_id = 6;
  inline bool has_sensor_id() const;
  inline void clear_sensor_id();
  static const int kSensorIdFieldNumber = 6;
  inline const ::std::string& sensor_id() const;
  inline void set_sensor_id(const ::std::string& value);
  inline void set_sensor_id(const char* value);
  inline void set_sensor_id(const char* value, size_t size);
  inline ::std::string* mutable_sensor_id();
  inline ::std::string* release_sensor_id();
  inline void set_allocated_sensor_id(::std::string* sensor_id);

  // @@protoc_insertion_point(class_scope:robotdata.SensorInfo)
 private:
  inline void set_has_anglespan();
  inline void clear_has_anglespan();
  inline void set_has_anglecenter();
  inline void clear_has_anglecenter();
  inline void set_has_offsetxmapmm();
  inline void clear_has_offsetxmapmm();
  inline void set_has_offsetymapmm();
  inline void clear_has_offsetymapmm();
  inline void set_has_distance();
  inline void clear_has_distance();
  inline void set_has_sensor_id();
  inline void clear_has_sensor_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float anglespan_;
  float anglecenter_;
  float offsetxmapmm_;
  float offsetymapmm_;
  ::std::string* sensor_id_;
  ::google::protobuf::int32 distance_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_robotdata_2eproto();
  friend void protobuf_AssignDesc_robotdata_2eproto();
  friend void protobuf_ShutdownFile_robotdata_2eproto();

  void InitAsDefaultInstance();
  static SensorInfo* default_instance_;
};
// -------------------------------------------------------------------

class FullMap_MapParticle : public ::google::protobuf::Message {
 public:
  FullMap_MapParticle();
  virtual ~FullMap_MapParticle();

  FullMap_MapParticle(const FullMap_MapParticle& from);

  inline FullMap_MapParticle& operator=(const FullMap_MapParticle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FullMap_MapParticle& default_instance();

  void Swap(FullMap_MapParticle* other);

  // implements Message ----------------------------------------------

  FullMap_MapParticle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FullMap_MapParticle& from);
  void MergeFrom(const FullMap_MapParticle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float posx = 1;
  inline bool has_posx() const;
  inline void clear_posx();
  static const int kPosxFieldNumber = 1;
  inline float posx() const;
  inline void set_posx(float value);

  // required float posy = 2;
  inline bool has_posy() const;
  inline void clear_posy();
  static const int kPosyFieldNumber = 2;
  inline float posy() const;
  inline void set_posy(float value);

  // required float weight = 3;
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 3;
  inline float weight() const;
  inline void set_weight(float value);

  // @@protoc_insertion_point(class_scope:robotdata.FullMap.MapParticle)
 private:
  inline void set_has_posx();
  inline void clear_has_posx();
  inline void set_has_posy();
  inline void clear_has_posy();
  inline void set_has_weight();
  inline void clear_has_weight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float posx_;
  float posy_;
  float weight_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_robotdata_2eproto();
  friend void protobuf_AssignDesc_robotdata_2eproto();
  friend void protobuf_ShutdownFile_robotdata_2eproto();

  void InitAsDefaultInstance();
  static FullMap_MapParticle* default_instance_;
};
// -------------------------------------------------------------------

class FullMap : public ::google::protobuf::Message {
 public:
  FullMap();
  virtual ~FullMap();

  FullMap(const FullMap& from);

  inline FullMap& operator=(const FullMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FullMap& default_instance();

  void Swap(FullMap* other);

  // implements Message ----------------------------------------------

  FullMap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FullMap& from);
  void MergeFrom(const FullMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FullMap_MapParticle MapParticle;

  // accessors -------------------------------------------------------

  // repeated .robotdata.FullMap.MapParticle wallParticles = 1;
  inline int wallparticles_size() const;
  inline void clear_wallparticles();
  static const int kWallParticlesFieldNumber = 1;
  inline const ::robotdata::FullMap_MapParticle& wallparticles(int index) const;
  inline ::robotdata::FullMap_MapParticle* mutable_wallparticles(int index);
  inline ::robotdata::FullMap_MapParticle* add_wallparticles();
  inline const ::google::protobuf::RepeatedPtrField< ::robotdata::FullMap_MapParticle >&
      wallparticles() const;
  inline ::google::protobuf::RepeatedPtrField< ::robotdata::FullMap_MapParticle >*
      mutable_wallparticles();

  // repeated .robotdata.FullMap.MapParticle safeParticles = 2;
  inline int safeparticles_size() const;
  inline void clear_safeparticles();
  static const int kSafeParticlesFieldNumber = 2;
  inline const ::robotdata::FullMap_MapParticle& safeparticles(int index) const;
  inline ::robotdata::FullMap_MapParticle* mutable_safeparticles(int index);
  inline ::robotdata::FullMap_MapParticle* add_safeparticles();
  inline const ::google::protobuf::RepeatedPtrField< ::robotdata::FullMap_MapParticle >&
      safeparticles() const;
  inline ::google::protobuf::RepeatedPtrField< ::robotdata::FullMap_MapParticle >*
      mutable_safeparticles();

  // @@protoc_insertion_point(class_scope:robotdata.FullMap)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::robotdata::FullMap_MapParticle > wallparticles_;
  ::google::protobuf::RepeatedPtrField< ::robotdata::FullMap_MapParticle > safeparticles_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_robotdata_2eproto();
  friend void protobuf_AssignDesc_robotdata_2eproto();
  friend void protobuf_ShutdownFile_robotdata_2eproto();

  void InitAsDefaultInstance();
  static FullMap* default_instance_;
};
// -------------------------------------------------------------------

class FullPath_PathDot : public ::google::protobuf::Message {
 public:
  FullPath_PathDot();
  virtual ~FullPath_PathDot();

  FullPath_PathDot(const FullPath_PathDot& from);

  inline FullPath_PathDot& operator=(const FullPath_PathDot& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FullPath_PathDot& default_instance();

  void Swap(FullPath_PathDot* other);

  // implements Message ----------------------------------------------

  FullPath_PathDot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FullPath_PathDot& from);
  void MergeFrom(const FullPath_PathDot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // repeated .robotdata.FullPath.PathDot nextDot = 3;
  inline int nextdot_size() const;
  inline void clear_nextdot();
  static const int kNextDotFieldNumber = 3;
  inline const ::robotdata::FullPath_PathDot& nextdot(int index) const;
  inline ::robotdata::FullPath_PathDot* mutable_nextdot(int index);
  inline ::robotdata::FullPath_PathDot* add_nextdot();
  inline const ::google::protobuf::RepeatedPtrField< ::robotdata::FullPath_PathDot >&
      nextdot() const;
  inline ::google::protobuf::RepeatedPtrField< ::robotdata::FullPath_PathDot >*
      mutable_nextdot();

  // optional .robotdata.FullPath.PathDot chosenDot = 4;
  inline bool has_chosendot() const;
  inline void clear_chosendot();
  static const int kChosenDotFieldNumber = 4;
  inline const ::robotdata::FullPath_PathDot& chosendot() const;
  inline ::robotdata::FullPath_PathDot* mutable_chosendot();
  inline ::robotdata::FullPath_PathDot* release_chosendot();
  inline void set_allocated_chosendot(::robotdata::FullPath_PathDot* chosendot);

  // @@protoc_insertion_point(class_scope:robotdata.FullPath.PathDot)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_chosendot();
  inline void clear_has_chosendot();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float x_;
  float y_;
  ::google::protobuf::RepeatedPtrField< ::robotdata::FullPath_PathDot > nextdot_;
  ::robotdata::FullPath_PathDot* chosendot_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_robotdata_2eproto();
  friend void protobuf_AssignDesc_robotdata_2eproto();
  friend void protobuf_ShutdownFile_robotdata_2eproto();

  void InitAsDefaultInstance();
  static FullPath_PathDot* default_instance_;
};
// -------------------------------------------------------------------

class FullPath : public ::google::protobuf::Message {
 public:
  FullPath();
  virtual ~FullPath();

  FullPath(const FullPath& from);

  inline FullPath& operator=(const FullPath& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FullPath& default_instance();

  void Swap(FullPath* other);

  // implements Message ----------------------------------------------

  FullPath* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FullPath& from);
  void MergeFrom(const FullPath& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FullPath_PathDot PathDot;

  // accessors -------------------------------------------------------

  // required .robotdata.FullPath.PathDot firstDot = 1;
  inline bool has_firstdot() const;
  inline void clear_firstdot();
  static const int kFirstDotFieldNumber = 1;
  inline const ::robotdata::FullPath_PathDot& firstdot() const;
  inline ::robotdata::FullPath_PathDot* mutable_firstdot();
  inline ::robotdata::FullPath_PathDot* release_firstdot();
  inline void set_allocated_firstdot(::robotdata::FullPath_PathDot* firstdot);

  // @@protoc_insertion_point(class_scope:robotdata.FullPath)
 private:
  inline void set_has_firstdot();
  inline void clear_has_firstdot();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::robotdata::FullPath_PathDot* firstdot_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_robotdata_2eproto();
  friend void protobuf_AssignDesc_robotdata_2eproto();
  friend void protobuf_ShutdownFile_robotdata_2eproto();

  void InitAsDefaultInstance();
  static FullPath* default_instance_;
};
// ===================================================================


// ===================================================================

// RobotInfo

// required int32 length = 1;
inline bool RobotInfo::has_length() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RobotInfo::set_has_length() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RobotInfo::clear_has_length() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RobotInfo::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline ::google::protobuf::int32 RobotInfo::length() const {
  return length_;
}
inline void RobotInfo::set_length(::google::protobuf::int32 value) {
  set_has_length();
  length_ = value;
}

// required int32 width = 2;
inline bool RobotInfo::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RobotInfo::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RobotInfo::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RobotInfo::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 RobotInfo::width() const {
  return width_;
}
inline void RobotInfo::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
}

// required float posx = 3;
inline bool RobotInfo::has_posx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RobotInfo::set_has_posx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RobotInfo::clear_has_posx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RobotInfo::clear_posx() {
  posx_ = 0;
  clear_has_posx();
}
inline float RobotInfo::posx() const {
  return posx_;
}
inline void RobotInfo::set_posx(float value) {
  set_has_posx();
  posx_ = value;
}

// required float posy = 4;
inline bool RobotInfo::has_posy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RobotInfo::set_has_posy() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RobotInfo::clear_has_posy() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RobotInfo::clear_posy() {
  posy_ = 0;
  clear_has_posy();
}
inline float RobotInfo::posy() const {
  return posy_;
}
inline void RobotInfo::set_posy(float value) {
  set_has_posy();
  posy_ = value;
}

// required float theta = 5;
inline bool RobotInfo::has_theta() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RobotInfo::set_has_theta() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RobotInfo::clear_has_theta() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RobotInfo::clear_theta() {
  theta_ = 0;
  clear_has_theta();
}
inline float RobotInfo::theta() const {
  return theta_;
}
inline void RobotInfo::set_theta(float value) {
  set_has_theta();
  theta_ = value;
}

// -------------------------------------------------------------------

// SensorInfo

// required float angleSpan = 1;
inline bool SensorInfo::has_anglespan() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SensorInfo::set_has_anglespan() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SensorInfo::clear_has_anglespan() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SensorInfo::clear_anglespan() {
  anglespan_ = 0;
  clear_has_anglespan();
}
inline float SensorInfo::anglespan() const {
  return anglespan_;
}
inline void SensorInfo::set_anglespan(float value) {
  set_has_anglespan();
  anglespan_ = value;
}

// required float angleCenter = 2;
inline bool SensorInfo::has_anglecenter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SensorInfo::set_has_anglecenter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SensorInfo::clear_has_anglecenter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SensorInfo::clear_anglecenter() {
  anglecenter_ = 0;
  clear_has_anglecenter();
}
inline float SensorInfo::anglecenter() const {
  return anglecenter_;
}
inline void SensorInfo::set_anglecenter(float value) {
  set_has_anglecenter();
  anglecenter_ = value;
}

// required float offsetXmapMM = 3;
inline bool SensorInfo::has_offsetxmapmm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SensorInfo::set_has_offsetxmapmm() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SensorInfo::clear_has_offsetxmapmm() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SensorInfo::clear_offsetxmapmm() {
  offsetxmapmm_ = 0;
  clear_has_offsetxmapmm();
}
inline float SensorInfo::offsetxmapmm() const {
  return offsetxmapmm_;
}
inline void SensorInfo::set_offsetxmapmm(float value) {
  set_has_offsetxmapmm();
  offsetxmapmm_ = value;
}

// required float offsetYmapMM = 4;
inline bool SensorInfo::has_offsetymapmm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SensorInfo::set_has_offsetymapmm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SensorInfo::clear_has_offsetymapmm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SensorInfo::clear_offsetymapmm() {
  offsetymapmm_ = 0;
  clear_has_offsetymapmm();
}
inline float SensorInfo::offsetymapmm() const {
  return offsetymapmm_;
}
inline void SensorInfo::set_offsetymapmm(float value) {
  set_has_offsetymapmm();
  offsetymapmm_ = value;
}

// required int32 distance = 5;
inline bool SensorInfo::has_distance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SensorInfo::set_has_distance() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SensorInfo::clear_has_distance() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SensorInfo::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
inline ::google::protobuf::int32 SensorInfo::distance() const {
  return distance_;
}
inline void SensorInfo::set_distance(::google::protobuf::int32 value) {
  set_has_distance();
  distance_ = value;
}

// required string sensor_id = 6;
inline bool SensorInfo::has_sensor_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SensorInfo::set_has_sensor_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SensorInfo::clear_has_sensor_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SensorInfo::clear_sensor_id() {
  if (sensor_id_ != &::google::protobuf::internal::kEmptyString) {
    sensor_id_->clear();
  }
  clear_has_sensor_id();
}
inline const ::std::string& SensorInfo::sensor_id() const {
  return *sensor_id_;
}
inline void SensorInfo::set_sensor_id(const ::std::string& value) {
  set_has_sensor_id();
  if (sensor_id_ == &::google::protobuf::internal::kEmptyString) {
    sensor_id_ = new ::std::string;
  }
  sensor_id_->assign(value);
}
inline void SensorInfo::set_sensor_id(const char* value) {
  set_has_sensor_id();
  if (sensor_id_ == &::google::protobuf::internal::kEmptyString) {
    sensor_id_ = new ::std::string;
  }
  sensor_id_->assign(value);
}
inline void SensorInfo::set_sensor_id(const char* value, size_t size) {
  set_has_sensor_id();
  if (sensor_id_ == &::google::protobuf::internal::kEmptyString) {
    sensor_id_ = new ::std::string;
  }
  sensor_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SensorInfo::mutable_sensor_id() {
  set_has_sensor_id();
  if (sensor_id_ == &::google::protobuf::internal::kEmptyString) {
    sensor_id_ = new ::std::string;
  }
  return sensor_id_;
}
inline ::std::string* SensorInfo::release_sensor_id() {
  clear_has_sensor_id();
  if (sensor_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sensor_id_;
    sensor_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SensorInfo::set_allocated_sensor_id(::std::string* sensor_id) {
  if (sensor_id_ != &::google::protobuf::internal::kEmptyString) {
    delete sensor_id_;
  }
  if (sensor_id) {
    set_has_sensor_id();
    sensor_id_ = sensor_id;
  } else {
    clear_has_sensor_id();
    sensor_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FullMap_MapParticle

// required float posx = 1;
inline bool FullMap_MapParticle::has_posx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FullMap_MapParticle::set_has_posx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FullMap_MapParticle::clear_has_posx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FullMap_MapParticle::clear_posx() {
  posx_ = 0;
  clear_has_posx();
}
inline float FullMap_MapParticle::posx() const {
  return posx_;
}
inline void FullMap_MapParticle::set_posx(float value) {
  set_has_posx();
  posx_ = value;
}

// required float posy = 2;
inline bool FullMap_MapParticle::has_posy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FullMap_MapParticle::set_has_posy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FullMap_MapParticle::clear_has_posy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FullMap_MapParticle::clear_posy() {
  posy_ = 0;
  clear_has_posy();
}
inline float FullMap_MapParticle::posy() const {
  return posy_;
}
inline void FullMap_MapParticle::set_posy(float value) {
  set_has_posy();
  posy_ = value;
}

// required float weight = 3;
inline bool FullMap_MapParticle::has_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FullMap_MapParticle::set_has_weight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FullMap_MapParticle::clear_has_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FullMap_MapParticle::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
inline float FullMap_MapParticle::weight() const {
  return weight_;
}
inline void FullMap_MapParticle::set_weight(float value) {
  set_has_weight();
  weight_ = value;
}

// -------------------------------------------------------------------

// FullMap

// repeated .robotdata.FullMap.MapParticle wallParticles = 1;
inline int FullMap::wallparticles_size() const {
  return wallparticles_.size();
}
inline void FullMap::clear_wallparticles() {
  wallparticles_.Clear();
}
inline const ::robotdata::FullMap_MapParticle& FullMap::wallparticles(int index) const {
  return wallparticles_.Get(index);
}
inline ::robotdata::FullMap_MapParticle* FullMap::mutable_wallparticles(int index) {
  return wallparticles_.Mutable(index);
}
inline ::robotdata::FullMap_MapParticle* FullMap::add_wallparticles() {
  return wallparticles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::robotdata::FullMap_MapParticle >&
FullMap::wallparticles() const {
  return wallparticles_;
}
inline ::google::protobuf::RepeatedPtrField< ::robotdata::FullMap_MapParticle >*
FullMap::mutable_wallparticles() {
  return &wallparticles_;
}

// repeated .robotdata.FullMap.MapParticle safeParticles = 2;
inline int FullMap::safeparticles_size() const {
  return safeparticles_.size();
}
inline void FullMap::clear_safeparticles() {
  safeparticles_.Clear();
}
inline const ::robotdata::FullMap_MapParticle& FullMap::safeparticles(int index) const {
  return safeparticles_.Get(index);
}
inline ::robotdata::FullMap_MapParticle* FullMap::mutable_safeparticles(int index) {
  return safeparticles_.Mutable(index);
}
inline ::robotdata::FullMap_MapParticle* FullMap::add_safeparticles() {
  return safeparticles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::robotdata::FullMap_MapParticle >&
FullMap::safeparticles() const {
  return safeparticles_;
}
inline ::google::protobuf::RepeatedPtrField< ::robotdata::FullMap_MapParticle >*
FullMap::mutable_safeparticles() {
  return &safeparticles_;
}

// -------------------------------------------------------------------

// FullPath_PathDot

// required float x = 1;
inline bool FullPath_PathDot::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FullPath_PathDot::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FullPath_PathDot::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FullPath_PathDot::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float FullPath_PathDot::x() const {
  return x_;
}
inline void FullPath_PathDot::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 2;
inline bool FullPath_PathDot::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FullPath_PathDot::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FullPath_PathDot::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FullPath_PathDot::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float FullPath_PathDot::y() const {
  return y_;
}
inline void FullPath_PathDot::set_y(float value) {
  set_has_y();
  y_ = value;
}

// repeated .robotdata.FullPath.PathDot nextDot = 3;
inline int FullPath_PathDot::nextdot_size() const {
  return nextdot_.size();
}
inline void FullPath_PathDot::clear_nextdot() {
  nextdot_.Clear();
}
inline const ::robotdata::FullPath_PathDot& FullPath_PathDot::nextdot(int index) const {
  return nextdot_.Get(index);
}
inline ::robotdata::FullPath_PathDot* FullPath_PathDot::mutable_nextdot(int index) {
  return nextdot_.Mutable(index);
}
inline ::robotdata::FullPath_PathDot* FullPath_PathDot::add_nextdot() {
  return nextdot_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::robotdata::FullPath_PathDot >&
FullPath_PathDot::nextdot() const {
  return nextdot_;
}
inline ::google::protobuf::RepeatedPtrField< ::robotdata::FullPath_PathDot >*
FullPath_PathDot::mutable_nextdot() {
  return &nextdot_;
}

// optional .robotdata.FullPath.PathDot chosenDot = 4;
inline bool FullPath_PathDot::has_chosendot() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FullPath_PathDot::set_has_chosendot() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FullPath_PathDot::clear_has_chosendot() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FullPath_PathDot::clear_chosendot() {
  if (chosendot_ != NULL) chosendot_->::robotdata::FullPath_PathDot::Clear();
  clear_has_chosendot();
}
inline const ::robotdata::FullPath_PathDot& FullPath_PathDot::chosendot() const {
  return chosendot_ != NULL ? *chosendot_ : *default_instance_->chosendot_;
}
inline ::robotdata::FullPath_PathDot* FullPath_PathDot::mutable_chosendot() {
  set_has_chosendot();
  if (chosendot_ == NULL) chosendot_ = new ::robotdata::FullPath_PathDot;
  return chosendot_;
}
inline ::robotdata::FullPath_PathDot* FullPath_PathDot::release_chosendot() {
  clear_has_chosendot();
  ::robotdata::FullPath_PathDot* temp = chosendot_;
  chosendot_ = NULL;
  return temp;
}
inline void FullPath_PathDot::set_allocated_chosendot(::robotdata::FullPath_PathDot* chosendot) {
  delete chosendot_;
  chosendot_ = chosendot;
  if (chosendot) {
    set_has_chosendot();
  } else {
    clear_has_chosendot();
  }
}

// -------------------------------------------------------------------

// FullPath

// required .robotdata.FullPath.PathDot firstDot = 1;
inline bool FullPath::has_firstdot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FullPath::set_has_firstdot() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FullPath::clear_has_firstdot() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FullPath::clear_firstdot() {
  if (firstdot_ != NULL) firstdot_->::robotdata::FullPath_PathDot::Clear();
  clear_has_firstdot();
}
inline const ::robotdata::FullPath_PathDot& FullPath::firstdot() const {
  return firstdot_ != NULL ? *firstdot_ : *default_instance_->firstdot_;
}
inline ::robotdata::FullPath_PathDot* FullPath::mutable_firstdot() {
  set_has_firstdot();
  if (firstdot_ == NULL) firstdot_ = new ::robotdata::FullPath_PathDot;
  return firstdot_;
}
inline ::robotdata::FullPath_PathDot* FullPath::release_firstdot() {
  clear_has_firstdot();
  ::robotdata::FullPath_PathDot* temp = firstdot_;
  firstdot_ = NULL;
  return temp;
}
inline void FullPath::set_allocated_firstdot(::robotdata::FullPath_PathDot* firstdot) {
  delete firstdot_;
  firstdot_ = firstdot;
  if (firstdot) {
    set_has_firstdot();
  } else {
    clear_has_firstdot();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace robotdata

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_robotdata_2eproto__INCLUDED
