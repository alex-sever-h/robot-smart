// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robotdata.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "robotdata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace robotdata {

namespace {

const ::google::protobuf::Descriptor* RobotInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RobotInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SensorInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SensorInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FullMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FullMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* FullMap_MapParticle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FullMap_MapParticle_reflection_ = NULL;
const ::google::protobuf::Descriptor* FullPath_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FullPath_reflection_ = NULL;
const ::google::protobuf::Descriptor* FullPath_PathDot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FullPath_PathDot_reflection_ = NULL;
const ::google::protobuf::Descriptor* Target_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Target_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_robotdata_2eproto() {
  protobuf_AddDesc_robotdata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "robotdata.proto");
  GOOGLE_CHECK(file != NULL);
  RobotInfo_descriptor_ = file->message_type(0);
  static const int RobotInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotInfo, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotInfo, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotInfo, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotInfo, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotInfo, theta_),
  };
  RobotInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RobotInfo_descriptor_,
      RobotInfo::default_instance_,
      RobotInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RobotInfo));
  SensorInfo_descriptor_ = file->message_type(1);
  static const int SensorInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorInfo, anglespan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorInfo, anglecenter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorInfo, offsetxmapmm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorInfo, offsetymapmm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorInfo, distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorInfo, sensor_id_),
  };
  SensorInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SensorInfo_descriptor_,
      SensorInfo::default_instance_,
      SensorInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SensorInfo));
  FullMap_descriptor_ = file->message_type(2);
  static const int FullMap_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullMap, wallparticles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullMap, safeparticles_),
  };
  FullMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FullMap_descriptor_,
      FullMap::default_instance_,
      FullMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FullMap));
  FullMap_MapParticle_descriptor_ = FullMap_descriptor_->nested_type(0);
  static const int FullMap_MapParticle_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullMap_MapParticle, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullMap_MapParticle, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullMap_MapParticle, weight_),
  };
  FullMap_MapParticle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FullMap_MapParticle_descriptor_,
      FullMap_MapParticle::default_instance_,
      FullMap_MapParticle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullMap_MapParticle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullMap_MapParticle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FullMap_MapParticle));
  FullPath_descriptor_ = file->message_type(3);
  static const int FullPath_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullPath, firstdot_),
  };
  FullPath_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FullPath_descriptor_,
      FullPath::default_instance_,
      FullPath_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullPath, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullPath, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FullPath));
  FullPath_PathDot_descriptor_ = FullPath_descriptor_->nested_type(0);
  static const int FullPath_PathDot_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullPath_PathDot, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullPath_PathDot, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullPath_PathDot, nextdot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullPath_PathDot, chosendot_),
  };
  FullPath_PathDot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FullPath_PathDot_descriptor_,
      FullPath_PathDot::default_instance_,
      FullPath_PathDot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullPath_PathDot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullPath_PathDot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FullPath_PathDot));
  Target_descriptor_ = file->message_type(4);
  static const int Target_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Target, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Target, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Target, theta_),
  };
  Target_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Target_descriptor_,
      Target::default_instance_,
      Target_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Target, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Target, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Target));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_robotdata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RobotInfo_descriptor_, &RobotInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SensorInfo_descriptor_, &SensorInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FullMap_descriptor_, &FullMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FullMap_MapParticle_descriptor_, &FullMap_MapParticle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FullPath_descriptor_, &FullPath::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FullPath_PathDot_descriptor_, &FullPath_PathDot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Target_descriptor_, &Target::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_robotdata_2eproto() {
  delete RobotInfo::default_instance_;
  delete RobotInfo_reflection_;
  delete SensorInfo::default_instance_;
  delete SensorInfo_reflection_;
  delete FullMap::default_instance_;
  delete FullMap_reflection_;
  delete FullMap_MapParticle::default_instance_;
  delete FullMap_MapParticle_reflection_;
  delete FullPath::default_instance_;
  delete FullPath_reflection_;
  delete FullPath_PathDot::default_instance_;
  delete FullPath_PathDot_reflection_;
  delete Target::default_instance_;
  delete Target_reflection_;
}

void protobuf_AddDesc_robotdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017robotdata.proto\022\trobotdata\"U\n\tRobotInf"
    "o\022\016\n\006length\030\001 \002(\005\022\r\n\005width\030\002 \002(\005\022\014\n\004posx"
    "\030\003 \002(\002\022\014\n\004posy\030\004 \002(\002\022\r\n\005theta\030\005 \002(\002\"\205\001\n\n"
    "SensorInfo\022\021\n\tangleSpan\030\001 \002(\002\022\023\n\013angleCe"
    "nter\030\002 \002(\002\022\024\n\014offsetXmapMM\030\003 \002(\002\022\024\n\014offs"
    "etYmapMM\030\004 \002(\002\022\020\n\010distance\030\005 \002(\005\022\021\n\tsens"
    "or_id\030\006 \002(\t\"\262\001\n\007FullMap\0225\n\rwallParticles"
    "\030\001 \003(\0132\036.robotdata.FullMap.MapParticle\0225"
    "\n\rsafeParticles\030\002 \003(\0132\036.robotdata.FullMa"
    "p.MapParticle\0329\n\013MapParticle\022\014\n\004posx\030\001 \002"
    "(\002\022\014\n\004posy\030\002 \002(\002\022\016\n\006weight\030\003 \002(\002\"\270\001\n\010Ful"
    "lPath\022-\n\010firstDot\030\001 \002(\0132\033.robotdata.Full"
    "Path.PathDot\032}\n\007PathDot\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030"
    "\002 \002(\002\022,\n\007nextDot\030\003 \003(\0132\033.robotdata.FullP"
    "ath.PathDot\022.\n\tchosenDot\030\004 \001(\0132\033.robotda"
    "ta.FullPath.PathDot\"3\n\006Target\022\014\n\004posx\030\003 "
    "\002(\002\022\014\n\004posy\030\004 \002(\002\022\r\n\005theta\030\005 \002(\002", 672);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "robotdata.proto", &protobuf_RegisterTypes);
  RobotInfo::default_instance_ = new RobotInfo();
  SensorInfo::default_instance_ = new SensorInfo();
  FullMap::default_instance_ = new FullMap();
  FullMap_MapParticle::default_instance_ = new FullMap_MapParticle();
  FullPath::default_instance_ = new FullPath();
  FullPath_PathDot::default_instance_ = new FullPath_PathDot();
  Target::default_instance_ = new Target();
  RobotInfo::default_instance_->InitAsDefaultInstance();
  SensorInfo::default_instance_->InitAsDefaultInstance();
  FullMap::default_instance_->InitAsDefaultInstance();
  FullMap_MapParticle::default_instance_->InitAsDefaultInstance();
  FullPath::default_instance_->InitAsDefaultInstance();
  FullPath_PathDot::default_instance_->InitAsDefaultInstance();
  Target::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_robotdata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_robotdata_2eproto {
  StaticDescriptorInitializer_robotdata_2eproto() {
    protobuf_AddDesc_robotdata_2eproto();
  }
} static_descriptor_initializer_robotdata_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RobotInfo::kLengthFieldNumber;
const int RobotInfo::kWidthFieldNumber;
const int RobotInfo::kPosxFieldNumber;
const int RobotInfo::kPosyFieldNumber;
const int RobotInfo::kThetaFieldNumber;
#endif  // !_MSC_VER

RobotInfo::RobotInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RobotInfo::InitAsDefaultInstance() {
}

RobotInfo::RobotInfo(const RobotInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RobotInfo::SharedCtor() {
  _cached_size_ = 0;
  length_ = 0;
  width_ = 0;
  posx_ = 0;
  posy_ = 0;
  theta_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RobotInfo::~RobotInfo() {
  SharedDtor();
}

void RobotInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RobotInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RobotInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RobotInfo_descriptor_;
}

const RobotInfo& RobotInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robotdata_2eproto();
  return *default_instance_;
}

RobotInfo* RobotInfo::default_instance_ = NULL;

RobotInfo* RobotInfo::New() const {
  return new RobotInfo;
}

void RobotInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    length_ = 0;
    width_ = 0;
    posx_ = 0;
    posy_ = 0;
    theta_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RobotInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 length = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_width;
        break;
      }

      // required int32 width = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_posx;
        break;
      }

      // required float posx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_posy;
        break;
      }

      // required float posy = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_theta;
        break;
      }

      // required float theta = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &theta_)));
          set_has_theta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RobotInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 length = 1;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->length(), output);
  }

  // required int32 width = 2;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }

  // required float posx = 3;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->posx(), output);
  }

  // required float posy = 4;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->posy(), output);
  }

  // required float theta = 5;
  if (has_theta()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->theta(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RobotInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 length = 1;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->length(), target);
  }

  // required int32 width = 2;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->width(), target);
  }

  // required float posx = 3;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->posx(), target);
  }

  // required float posy = 4;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->posy(), target);
  }

  // required float theta = 5;
  if (has_theta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->theta(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RobotInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 length = 1;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }

    // required int32 width = 2;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // required float posx = 3;
    if (has_posx()) {
      total_size += 1 + 4;
    }

    // required float posy = 4;
    if (has_posy()) {
      total_size += 1 + 4;
    }

    // required float theta = 5;
    if (has_theta()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RobotInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RobotInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RobotInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RobotInfo::MergeFrom(const RobotInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_theta()) {
      set_theta(from.theta());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RobotInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotInfo::CopyFrom(const RobotInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void RobotInfo::Swap(RobotInfo* other) {
  if (other != this) {
    std::swap(length_, other->length_);
    std::swap(width_, other->width_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(theta_, other->theta_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RobotInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RobotInfo_descriptor_;
  metadata.reflection = RobotInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SensorInfo::kAngleSpanFieldNumber;
const int SensorInfo::kAngleCenterFieldNumber;
const int SensorInfo::kOffsetXmapMMFieldNumber;
const int SensorInfo::kOffsetYmapMMFieldNumber;
const int SensorInfo::kDistanceFieldNumber;
const int SensorInfo::kSensorIdFieldNumber;
#endif  // !_MSC_VER

SensorInfo::SensorInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SensorInfo::InitAsDefaultInstance() {
}

SensorInfo::SensorInfo(const SensorInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SensorInfo::SharedCtor() {
  _cached_size_ = 0;
  anglespan_ = 0;
  anglecenter_ = 0;
  offsetxmapmm_ = 0;
  offsetymapmm_ = 0;
  distance_ = 0;
  sensor_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SensorInfo::~SensorInfo() {
  SharedDtor();
}

void SensorInfo::SharedDtor() {
  if (sensor_id_ != &::google::protobuf::internal::kEmptyString) {
    delete sensor_id_;
  }
  if (this != default_instance_) {
  }
}

void SensorInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SensorInfo_descriptor_;
}

const SensorInfo& SensorInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robotdata_2eproto();
  return *default_instance_;
}

SensorInfo* SensorInfo::default_instance_ = NULL;

SensorInfo* SensorInfo::New() const {
  return new SensorInfo;
}

void SensorInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    anglespan_ = 0;
    anglecenter_ = 0;
    offsetxmapmm_ = 0;
    offsetymapmm_ = 0;
    distance_ = 0;
    if (has_sensor_id()) {
      if (sensor_id_ != &::google::protobuf::internal::kEmptyString) {
        sensor_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SensorInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float angleSpan = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &anglespan_)));
          set_has_anglespan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_angleCenter;
        break;
      }

      // required float angleCenter = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_angleCenter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &anglecenter_)));
          set_has_anglecenter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_offsetXmapMM;
        break;
      }

      // required float offsetXmapMM = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_offsetXmapMM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offsetxmapmm_)));
          set_has_offsetxmapmm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_offsetYmapMM;
        break;
      }

      // required float offsetYmapMM = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_offsetYmapMM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offsetymapmm_)));
          set_has_offsetymapmm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_distance;
        break;
      }

      // required int32 distance = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_sensor_id;
        break;
      }

      // required string sensor_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sensor_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensor_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sensor_id().data(), this->sensor_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SensorInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float angleSpan = 1;
  if (has_anglespan()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->anglespan(), output);
  }

  // required float angleCenter = 2;
  if (has_anglecenter()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->anglecenter(), output);
  }

  // required float offsetXmapMM = 3;
  if (has_offsetxmapmm()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->offsetxmapmm(), output);
  }

  // required float offsetYmapMM = 4;
  if (has_offsetymapmm()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->offsetymapmm(), output);
  }

  // required int32 distance = 5;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->distance(), output);
  }

  // required string sensor_id = 6;
  if (has_sensor_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sensor_id().data(), this->sensor_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->sensor_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SensorInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float angleSpan = 1;
  if (has_anglespan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->anglespan(), target);
  }

  // required float angleCenter = 2;
  if (has_anglecenter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->anglecenter(), target);
  }

  // required float offsetXmapMM = 3;
  if (has_offsetxmapmm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->offsetxmapmm(), target);
  }

  // required float offsetYmapMM = 4;
  if (has_offsetymapmm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->offsetymapmm(), target);
  }

  // required int32 distance = 5;
  if (has_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->distance(), target);
  }

  // required string sensor_id = 6;
  if (has_sensor_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sensor_id().data(), this->sensor_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sensor_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SensorInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float angleSpan = 1;
    if (has_anglespan()) {
      total_size += 1 + 4;
    }

    // required float angleCenter = 2;
    if (has_anglecenter()) {
      total_size += 1 + 4;
    }

    // required float offsetXmapMM = 3;
    if (has_offsetxmapmm()) {
      total_size += 1 + 4;
    }

    // required float offsetYmapMM = 4;
    if (has_offsetymapmm()) {
      total_size += 1 + 4;
    }

    // required int32 distance = 5;
    if (has_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->distance());
    }

    // required string sensor_id = 6;
    if (has_sensor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sensor_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SensorInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SensorInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SensorInfo::MergeFrom(const SensorInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_anglespan()) {
      set_anglespan(from.anglespan());
    }
    if (from.has_anglecenter()) {
      set_anglecenter(from.anglecenter());
    }
    if (from.has_offsetxmapmm()) {
      set_offsetxmapmm(from.offsetxmapmm());
    }
    if (from.has_offsetymapmm()) {
      set_offsetymapmm(from.offsetymapmm());
    }
    if (from.has_distance()) {
      set_distance(from.distance());
    }
    if (from.has_sensor_id()) {
      set_sensor_id(from.sensor_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SensorInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorInfo::CopyFrom(const SensorInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void SensorInfo::Swap(SensorInfo* other) {
  if (other != this) {
    std::swap(anglespan_, other->anglespan_);
    std::swap(anglecenter_, other->anglecenter_);
    std::swap(offsetxmapmm_, other->offsetxmapmm_);
    std::swap(offsetymapmm_, other->offsetymapmm_);
    std::swap(distance_, other->distance_);
    std::swap(sensor_id_, other->sensor_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SensorInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SensorInfo_descriptor_;
  metadata.reflection = SensorInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FullMap_MapParticle::kPosxFieldNumber;
const int FullMap_MapParticle::kPosyFieldNumber;
const int FullMap_MapParticle::kWeightFieldNumber;
#endif  // !_MSC_VER

FullMap_MapParticle::FullMap_MapParticle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FullMap_MapParticle::InitAsDefaultInstance() {
}

FullMap_MapParticle::FullMap_MapParticle(const FullMap_MapParticle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FullMap_MapParticle::SharedCtor() {
  _cached_size_ = 0;
  posx_ = 0;
  posy_ = 0;
  weight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FullMap_MapParticle::~FullMap_MapParticle() {
  SharedDtor();
}

void FullMap_MapParticle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FullMap_MapParticle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FullMap_MapParticle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FullMap_MapParticle_descriptor_;
}

const FullMap_MapParticle& FullMap_MapParticle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robotdata_2eproto();
  return *default_instance_;
}

FullMap_MapParticle* FullMap_MapParticle::default_instance_ = NULL;

FullMap_MapParticle* FullMap_MapParticle::New() const {
  return new FullMap_MapParticle;
}

void FullMap_MapParticle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    posx_ = 0;
    posy_ = 0;
    weight_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FullMap_MapParticle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float posx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_posy;
        break;
      }

      // required float posy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_weight;
        break;
      }

      // required float weight = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FullMap_MapParticle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float posx = 1;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->posx(), output);
  }

  // required float posy = 2;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->posy(), output);
  }

  // required float weight = 3;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->weight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FullMap_MapParticle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float posx = 1;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->posx(), target);
  }

  // required float posy = 2;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->posy(), target);
  }

  // required float weight = 3;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->weight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FullMap_MapParticle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float posx = 1;
    if (has_posx()) {
      total_size += 1 + 4;
    }

    // required float posy = 2;
    if (has_posy()) {
      total_size += 1 + 4;
    }

    // required float weight = 3;
    if (has_weight()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FullMap_MapParticle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FullMap_MapParticle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FullMap_MapParticle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FullMap_MapParticle::MergeFrom(const FullMap_MapParticle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FullMap_MapParticle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FullMap_MapParticle::CopyFrom(const FullMap_MapParticle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FullMap_MapParticle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void FullMap_MapParticle::Swap(FullMap_MapParticle* other) {
  if (other != this) {
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(weight_, other->weight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FullMap_MapParticle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FullMap_MapParticle_descriptor_;
  metadata.reflection = FullMap_MapParticle_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FullMap::kWallParticlesFieldNumber;
const int FullMap::kSafeParticlesFieldNumber;
#endif  // !_MSC_VER

FullMap::FullMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FullMap::InitAsDefaultInstance() {
}

FullMap::FullMap(const FullMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FullMap::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FullMap::~FullMap() {
  SharedDtor();
}

void FullMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FullMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FullMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FullMap_descriptor_;
}

const FullMap& FullMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robotdata_2eproto();
  return *default_instance_;
}

FullMap* FullMap::default_instance_ = NULL;

FullMap* FullMap::New() const {
  return new FullMap;
}

void FullMap::Clear() {
  wallparticles_.Clear();
  safeparticles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FullMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .robotdata.FullMap.MapParticle wallParticles = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wallParticles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wallparticles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_wallParticles;
        if (input->ExpectTag(18)) goto parse_safeParticles;
        break;
      }

      // repeated .robotdata.FullMap.MapParticle safeParticles = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_safeParticles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_safeparticles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_safeParticles;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FullMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .robotdata.FullMap.MapParticle wallParticles = 1;
  for (int i = 0; i < this->wallparticles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->wallparticles(i), output);
  }

  // repeated .robotdata.FullMap.MapParticle safeParticles = 2;
  for (int i = 0; i < this->safeparticles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->safeparticles(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FullMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .robotdata.FullMap.MapParticle wallParticles = 1;
  for (int i = 0; i < this->wallparticles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->wallparticles(i), target);
  }

  // repeated .robotdata.FullMap.MapParticle safeParticles = 2;
  for (int i = 0; i < this->safeparticles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->safeparticles(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FullMap::ByteSize() const {
  int total_size = 0;

  // repeated .robotdata.FullMap.MapParticle wallParticles = 1;
  total_size += 1 * this->wallparticles_size();
  for (int i = 0; i < this->wallparticles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wallparticles(i));
  }

  // repeated .robotdata.FullMap.MapParticle safeParticles = 2;
  total_size += 1 * this->safeparticles_size();
  for (int i = 0; i < this->safeparticles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->safeparticles(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FullMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FullMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FullMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FullMap::MergeFrom(const FullMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  wallparticles_.MergeFrom(from.wallparticles_);
  safeparticles_.MergeFrom(from.safeparticles_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FullMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FullMap::CopyFrom(const FullMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FullMap::IsInitialized() const {

  for (int i = 0; i < wallparticles_size(); i++) {
    if (!this->wallparticles(i).IsInitialized()) return false;
  }
  for (int i = 0; i < safeparticles_size(); i++) {
    if (!this->safeparticles(i).IsInitialized()) return false;
  }
  return true;
}

void FullMap::Swap(FullMap* other) {
  if (other != this) {
    wallparticles_.Swap(&other->wallparticles_);
    safeparticles_.Swap(&other->safeparticles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FullMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FullMap_descriptor_;
  metadata.reflection = FullMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FullPath_PathDot::kXFieldNumber;
const int FullPath_PathDot::kYFieldNumber;
const int FullPath_PathDot::kNextDotFieldNumber;
const int FullPath_PathDot::kChosenDotFieldNumber;
#endif  // !_MSC_VER

FullPath_PathDot::FullPath_PathDot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FullPath_PathDot::InitAsDefaultInstance() {
  chosendot_ = const_cast< ::robotdata::FullPath_PathDot*>(&::robotdata::FullPath_PathDot::default_instance());
}

FullPath_PathDot::FullPath_PathDot(const FullPath_PathDot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FullPath_PathDot::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  chosendot_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FullPath_PathDot::~FullPath_PathDot() {
  SharedDtor();
}

void FullPath_PathDot::SharedDtor() {
  if (this != default_instance_) {
    delete chosendot_;
  }
}

void FullPath_PathDot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FullPath_PathDot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FullPath_PathDot_descriptor_;
}

const FullPath_PathDot& FullPath_PathDot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robotdata_2eproto();
  return *default_instance_;
}

FullPath_PathDot* FullPath_PathDot::default_instance_ = NULL;

FullPath_PathDot* FullPath_PathDot::New() const {
  return new FullPath_PathDot;
}

void FullPath_PathDot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    if (has_chosendot()) {
      if (chosendot_ != NULL) chosendot_->::robotdata::FullPath_PathDot::Clear();
    }
  }
  nextdot_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FullPath_PathDot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nextDot;
        break;
      }

      // repeated .robotdata.FullPath.PathDot nextDot = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nextDot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nextdot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nextDot;
        if (input->ExpectTag(34)) goto parse_chosenDot;
        break;
      }

      // optional .robotdata.FullPath.PathDot chosenDot = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chosenDot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chosendot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FullPath_PathDot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // repeated .robotdata.FullPath.PathDot nextDot = 3;
  for (int i = 0; i < this->nextdot_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->nextdot(i), output);
  }

  // optional .robotdata.FullPath.PathDot chosenDot = 4;
  if (has_chosendot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->chosendot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FullPath_PathDot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // repeated .robotdata.FullPath.PathDot nextDot = 3;
  for (int i = 0; i < this->nextdot_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->nextdot(i), target);
  }

  // optional .robotdata.FullPath.PathDot chosenDot = 4;
  if (has_chosendot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->chosendot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FullPath_PathDot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional .robotdata.FullPath.PathDot chosenDot = 4;
    if (has_chosendot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chosendot());
    }

  }
  // repeated .robotdata.FullPath.PathDot nextDot = 3;
  total_size += 1 * this->nextdot_size();
  for (int i = 0; i < this->nextdot_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nextdot(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FullPath_PathDot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FullPath_PathDot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FullPath_PathDot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FullPath_PathDot::MergeFrom(const FullPath_PathDot& from) {
  GOOGLE_CHECK_NE(&from, this);
  nextdot_.MergeFrom(from.nextdot_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_chosendot()) {
      mutable_chosendot()->::robotdata::FullPath_PathDot::MergeFrom(from.chosendot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FullPath_PathDot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FullPath_PathDot::CopyFrom(const FullPath_PathDot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FullPath_PathDot::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < nextdot_size(); i++) {
    if (!this->nextdot(i).IsInitialized()) return false;
  }
  if (has_chosendot()) {
    if (!this->chosendot().IsInitialized()) return false;
  }
  return true;
}

void FullPath_PathDot::Swap(FullPath_PathDot* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    nextdot_.Swap(&other->nextdot_);
    std::swap(chosendot_, other->chosendot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FullPath_PathDot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FullPath_PathDot_descriptor_;
  metadata.reflection = FullPath_PathDot_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FullPath::kFirstDotFieldNumber;
#endif  // !_MSC_VER

FullPath::FullPath()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FullPath::InitAsDefaultInstance() {
  firstdot_ = const_cast< ::robotdata::FullPath_PathDot*>(&::robotdata::FullPath_PathDot::default_instance());
}

FullPath::FullPath(const FullPath& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FullPath::SharedCtor() {
  _cached_size_ = 0;
  firstdot_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FullPath::~FullPath() {
  SharedDtor();
}

void FullPath::SharedDtor() {
  if (this != default_instance_) {
    delete firstdot_;
  }
}

void FullPath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FullPath::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FullPath_descriptor_;
}

const FullPath& FullPath::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robotdata_2eproto();
  return *default_instance_;
}

FullPath* FullPath::default_instance_ = NULL;

FullPath* FullPath::New() const {
  return new FullPath;
}

void FullPath::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_firstdot()) {
      if (firstdot_ != NULL) firstdot_->::robotdata::FullPath_PathDot::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FullPath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .robotdata.FullPath.PathDot firstDot = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_firstdot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FullPath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .robotdata.FullPath.PathDot firstDot = 1;
  if (has_firstdot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->firstdot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FullPath::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .robotdata.FullPath.PathDot firstDot = 1;
  if (has_firstdot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->firstdot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FullPath::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .robotdata.FullPath.PathDot firstDot = 1;
    if (has_firstdot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->firstdot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FullPath::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FullPath* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FullPath*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FullPath::MergeFrom(const FullPath& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_firstdot()) {
      mutable_firstdot()->::robotdata::FullPath_PathDot::MergeFrom(from.firstdot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FullPath::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FullPath::CopyFrom(const FullPath& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FullPath::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_firstdot()) {
    if (!this->firstdot().IsInitialized()) return false;
  }
  return true;
}

void FullPath::Swap(FullPath* other) {
  if (other != this) {
    std::swap(firstdot_, other->firstdot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FullPath::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FullPath_descriptor_;
  metadata.reflection = FullPath_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Target::kPosxFieldNumber;
const int Target::kPosyFieldNumber;
const int Target::kThetaFieldNumber;
#endif  // !_MSC_VER

Target::Target()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Target::InitAsDefaultInstance() {
}

Target::Target(const Target& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Target::SharedCtor() {
  _cached_size_ = 0;
  posx_ = 0;
  posy_ = 0;
  theta_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Target::~Target() {
  SharedDtor();
}

void Target::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Target::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Target::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Target_descriptor_;
}

const Target& Target::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robotdata_2eproto();
  return *default_instance_;
}

Target* Target::default_instance_ = NULL;

Target* Target::New() const {
  return new Target;
}

void Target::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    posx_ = 0;
    posy_ = 0;
    theta_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Target::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float posx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_posy;
        break;
      }

      // required float posy = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_theta;
        break;
      }

      // required float theta = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &theta_)));
          set_has_theta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Target::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float posx = 3;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->posx(), output);
  }

  // required float posy = 4;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->posy(), output);
  }

  // required float theta = 5;
  if (has_theta()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->theta(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Target::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float posx = 3;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->posx(), target);
  }

  // required float posy = 4;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->posy(), target);
  }

  // required float theta = 5;
  if (has_theta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->theta(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Target::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float posx = 3;
    if (has_posx()) {
      total_size += 1 + 4;
    }

    // required float posy = 4;
    if (has_posy()) {
      total_size += 1 + 4;
    }

    // required float theta = 5;
    if (has_theta()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Target::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Target* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Target*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Target::MergeFrom(const Target& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_theta()) {
      set_theta(from.theta());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Target::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Target::CopyFrom(const Target& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Target::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Target::Swap(Target* other) {
  if (other != this) {
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(theta_, other->theta_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Target::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Target_descriptor_;
  metadata.reflection = Target_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace robotdata

// @@protoc_insertion_point(global_scope)
